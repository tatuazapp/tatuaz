<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tatuaz.Gateway</name>
    </assembly>
    <members>
        <member name="T:Tatuaz.Gateway.Authorization.ActiveUserHandler">
            <summary>
            Authorization handler for checking if user exists in database meaning he got through onboarding
            </summary>
        </member>
        <member name="M:Tatuaz.Gateway.Authorization.ActiveUserHandler.#ctor(MediatR.IMediator)">
            <summary>
            Default constructor
            </summary>
            <param name="mediator">From DI</param>
        </member>
        <member name="M:Tatuaz.Gateway.Authorization.ActiveUserHandler.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Tatuaz.Gateway.Authorization.ActiveUserRequirement)">
            <summary>
            Check if user exists in database
            </summary>
            <param name="context"></param>
            <param name="requirement"></param>
        </member>
        <member name="T:Tatuaz.Gateway.Authorization.ActiveUserRequirement">
            <summary>
            Represents a requirement that user went through onboarding.
            </summary>
        </member>
        <member name="F:Tatuaz.Gateway.Authorization.ActiveUserRequirement.Name">
            <summary>
            Name of the requirement.
            </summary>
        </member>
        <member name="T:Tatuaz.Gateway.Authorization.AuthorizeActiveUserAttribute">
            <summary>
            Attribute to mark a controller as requiring user that went through onboarding.
            </summary>
        </member>
        <member name="M:Tatuaz.Gateway.Authorization.AuthorizeActiveUserAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Tatuaz.Gateway.Configuration.AuthOpt">
            <summary>
            Represents auth0 configuration.
            </summary>
        </member>
        <member name="F:Tatuaz.Gateway.Configuration.AuthOpt.SectionName">
            <summary>
                Name of section this corresponds to in appsettings.json
            </summary>
        </member>
        <member name="P:Tatuaz.Gateway.Configuration.AuthOpt.Authority">
            <summary>
                Auth0 authority
            </summary>
        </member>
        <member name="P:Tatuaz.Gateway.Configuration.AuthOpt.Audience">
            <summary>
                Auth0 audience
            </summary>
        </member>
        <member name="P:Tatuaz.Gateway.Configuration.AuthOpt.Domain">
            <summary>
                Auth0 domain
            </summary>
        </member>
        <member name="T:Tatuaz.Gateway.Configuration.SwaggerOpt">
            <summary>
            Represents gateway swagger configuration.
            </summary>
        </member>
        <member name="F:Tatuaz.Gateway.Configuration.SwaggerOpt.SectionName">
            <summary>
                Name of section this corresponds to in appsettings.json
            </summary>
        </member>
        <member name="P:Tatuaz.Gateway.Configuration.SwaggerOpt.Enabled">
            <summary>
                Is swagger enabled
            </summary>
        </member>
        <member name="P:Tatuaz.Gateway.Configuration.SwaggerOpt.Route">
            <summary>
            Route prefix for swagger
            </summary>
        </member>
        <member name="P:Tatuaz.Gateway.Configuration.SwaggerOpt.Name">
            <summary>
             Name of the API
            </summary>
        </member>
        <member name="P:Tatuaz.Gateway.Configuration.SwaggerOpt.Title">
            <summary>
            Swagger title
            </summary>
        </member>
        <member name="P:Tatuaz.Gateway.Configuration.SwaggerOpt.Theme">
            <summary>
            Optional theme added via custom css
            </summary>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.BookingController.SendBookingRequest(Tatuaz.Shared.Domain.Dtos.Dtos.Booking.SendBookingRequestDto)">
            <summary>
            Send booking request. Limit 1024 znaki na komentarz jak co≈õ B-)
            </summary>
            <param name="sendBookingRequestDto"></param>
            <returns></returns>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.BookingController.ListMyBookingRequests(Tatuaz.Shared.Domain.Dtos.Dtos.Booking.ListMyBookingRequestsDto)">
            <summary>
            List my booking requests
            </summary>
            <param name="listMyBookingRequestsDto"></param>
            <returns></returns>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.BookingController.ListIncomingBookingRequests(Tatuaz.Shared.Domain.Dtos.Dtos.Booking.ListIncomingBookingRequestsDto)">
            <summary>
            List incoming booking requests
            </summary>
            <param name="listIncomingBookingRequestsDto"></param>
            <returns></returns>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.BookingController.RespondToBookingRequest(Tatuaz.Shared.Domain.Dtos.Dtos.Booking.RespondToBookingRequestDto)">
            <summary>
            Respond to booking request
            </summary>
            <param name="respondToBookingRequestDto"></param>
            <returns></returns>
        </member>
        <member name="T:Tatuaz.Gateway.Controllers.CommentController">
            <summary>
            Controller for comments under posts
            </summary>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.CommentController.#ctor(MediatR.IMediator)">
            <inheritdoc />
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.CommentController.SubmitComment(Tatuaz.Shared.Domain.Dtos.Dtos.Comment.SubmitCommentDto)">
            <summary>
            Submit comments
            </summary>
            <param name="submitCommentDto"></param>
            <returns></returns>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.CommentController.LikeComment(Tatuaz.Shared.Domain.Dtos.Dtos.Comment.LikeCommentDto)">
            <summary>
            Like comment
            </summary>
            <param name="likeCommentDto"></param>
            <returns></returns>
        </member>
        <member name="T:Tatuaz.Gateway.Controllers.IdentityController">
            <summary>
            Controller for user related operations
            </summary>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.IdentityController.#ctor(MediatR.IMediator)">
            <inheritdoc />
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.IdentityController.Me">
            <summary>
                Check what user is logged in
            </summary>
            <returns>UserDto</returns>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.IdentityController.SignUp(Tatuaz.Shared.Domain.Dtos.Dtos.Identity.SignUpDto)">
            <summary>
                Register user
            </summary>
            <returns>UserDto</returns>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.IdentityController.SetForegroundPhoto(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Set foreground photo
            </summary>
            <param name="setForegroundPhotoDto"></param>
            <returns></returns>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.IdentityController.SetBackgroundPhoto(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Set background photo
            </summary>
            <param name="setBackgroundPhotoDto"></param>
            <returns></returns>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.IdentityController.DeleteForegroundPhoto(Tatuaz.Shared.Domain.Dtos.Dtos.Identity.DeleteForegroundPhotoDto)">
            <summary>
            Delete foreground photo
            </summary>
            <param name="deleteForegroundPhotoDto"></param>
            <returns></returns>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.IdentityController.DeleteBackgroundPhoto(Tatuaz.Shared.Domain.Dtos.Dtos.Identity.DeleteBackgroundPhotoDto)">
            <summary>
            Delete background photo
            </summary>
            <param name="deleteBackgroundPhotoDto"></param>
            <returns></returns>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.IdentityController.GetUser(Tatuaz.Shared.Domain.Dtos.Dtos.Identity.GetUserDto)">
            <summary>
            Get user with username
            </summary>
            <param name="getUserDto"></param>
            <returns></returns>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.IdentityController.SetBio(Tatuaz.Shared.Domain.Dtos.Dtos.Identity.SetBioDto)">
            <summary>
            Set bio for current user
            </summary>
            <param name="bio"></param>
            <returns></returns>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.IdentityController.SetAccountType(Tatuaz.Shared.Domain.Dtos.Dtos.Identity.SetAccountTypeDto)">
            <summary>
            Set account type for current user
            </summary>
            <param name="setAccountTypeDto"></param>
            <returns></returns>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.IdentityController.GetTopArtists(Tatuaz.Shared.Domain.Dtos.Dtos.Identity.GetTopArtistsDto)">
            <summary>
            Set account type for current user
            </summary>
            <param name="setAccountTypeDto"></param>
            <returns></returns>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.IdentityController.SearchUsers(Tatuaz.Shared.Domain.Dtos.Dtos.Identity.SearchUsersDto)">
             <summary>
             Search users
             </summary>
            <param name="searchUsersDto"></param>
             <returns></returns>
        </member>
        <member name="T:Tatuaz.Gateway.Controllers.PhotoController">
            <summary>
            Controller for photos
            </summary>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.PhotoController.#ctor(MediatR.IMediator)">
            <inheritdoc />
        </member>
        <member name="T:Tatuaz.Gateway.Controllers.PostController">
            <summary>
            Controller for posts
            </summary>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.PostController.#ctor(MediatR.IMediator)">
            <inheritdoc />
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.PostController.UploadPostPhotos(Tatuaz.Shared.Domain.Dtos.Dtos.Post.UploadPostPhotosDto)">
            <summary>
            Upload post photos
            </summary>
            <param name="photos"></param>
            <returns></returns>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.PostController.FinalizePost(Tatuaz.Shared.Domain.Dtos.Dtos.Post.FinalizePostDto)">
            <summary>
            Finalize post
            </summary>
            <param name="finalizePostDto"></param>
            <returns></returns>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.PostController.SearchPosts(Tatuaz.Shared.Domain.Dtos.Dtos.Post.SearchPostsDto)">
            <summary>
            Search posts
            </summary>
            <param name="searchPostsDto"></param>
            <returns></returns>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.PostController.LikePost(Tatuaz.Shared.Domain.Dtos.Dtos.Post.LikePostDto)">
            <summary>
            Like post
            </summary>
            <param name="likePostDto"></param>
            <returns></returns>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.PostController.GetUserPosts(Tatuaz.Shared.Domain.Dtos.Dtos.Post.GetUserPostsDto)">
            <summary>
            Get user posts
            </summary>
            <param name="getUserPostsDto"></param>
            <returns></returns>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.PostController.GetPostFeed(Tatuaz.Shared.Domain.Dtos.Dtos.Post.GetPostFeedDto)">
            <summary>
            Get post feed
            </summary>
            <param name="getPostFeedDto"></param>
            <returns></returns>
        </member>
        <member name="T:Tatuaz.Gateway.Controllers.StatisticsController">
            <summary>
            Controller for dashboard
            </summary>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.StatisticsController.#ctor(MediatR.IMediator)">
            <summary>
            Constructor receiving the mediator from DI
            </summary>
            <param name="mediator"></param>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.StatisticsController.GetRegisteredStats">
            <summary>
                Get number of registered tattoo artists, clients and users.
                A client is a user who has booked at least 1 appointment
            </summary>
            <returns>RegisteredStatsDto</returns>
        </member>
        <member name="T:Tatuaz.Gateway.Controllers.TatuazControllerBase">
            <summary>
            Base controller for all controllers
            </summary>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.TatuazControllerBase.#ctor(MediatR.IMediator)">
            <summary>
            Constructor receiving the mediator from DI
            </summary>
            <param name="mediator"></param>
        </member>
        <member name="P:Tatuaz.Gateway.Controllers.TatuazControllerBase.Mediator">
            <summary>
            Used to communicate with handlers
            </summary>
        </member>
        <member name="M:Tatuaz.Gateway.Controllers.TatuazControllerBase.ResultToActionResult``1(Tatuaz.Shared.Pipeline.Messages.TatuazResult{``0})">
            <summary>
            Wrapper for mapping TatuazResult to IActionResult
            </summary>
            <param name="result"></param>
            <typeparam name="TData"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Tatuaz.Gateway.GatewayExtensions">
            <summary>
            Extensions for configuring gateway services and host
            </summary>
        </member>
        <member name="P:Tatuaz.Gateway.GatewayExtensions.TatuazCorsName">
            <summary>
            Cors policy name
            </summary>
        </member>
        <member name="M:Tatuaz.Gateway.GatewayExtensions.RegisterGatewayHost(Microsoft.AspNetCore.Builder.ConfigureHostBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configure gateway host
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:Tatuaz.Gateway.GatewayExtensions.RegisterGatewayServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configure gateway services
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Tatuaz.Gateway.GatewayExtensions.GetAuthOpt(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Read auth0 options from configuration
            </summary>
            <param name="configuration"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Tatuaz.Gateway.GatewayExtensions.GetSwaggerOpt(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Read swagger options from configuration
            </summary>
            <param name="configuration"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Tatuaz.Gateway.HttpHelpers">
            <summary>
            Helper methods related to http requests
            </summary>
        </member>
        <member name="M:Tatuaz.Gateway.HttpHelpers.ToOkObject``1(Tatuaz.Shared.Pipeline.Messages.TatuazResult{``0})">
            <summary>
                Helper method for generating response.
            </summary>
            <param name="result"></param>
            <typeparam name="TData"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Tatuaz.Gateway.HttpHelpers.ToErrorsObject(Tatuaz.Shared.Pipeline.Messages.TatuazError[])">
            <summary>
                Helper method for generating response.
            </summary>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="T:Tatuaz.Gateway.HttpResponses.EmptyResponse">
            <summary>
            Response for marking codes that do not return any data.
            </summary>
        </member>
        <member name="T:Tatuaz.Gateway.HttpResponses.ErrorResponse">
            <summary>
                Wrapper used for returning failed responses.
            </summary>
            <param name="Errors">List of errors.</param>
            <param name="Success">Indicates if request was successful. Should be always false for this type of response.</param>
        </member>
        <member name="M:Tatuaz.Gateway.HttpResponses.ErrorResponse.#ctor(Tatuaz.Shared.Pipeline.Messages.TatuazError[],System.Boolean)">
            <summary>
                Wrapper used for returning failed responses.
            </summary>
            <param name="Errors">List of errors.</param>
            <param name="Success">Indicates if request was successful. Should be always false for this type of response.</param>
        </member>
        <member name="P:Tatuaz.Gateway.HttpResponses.ErrorResponse.Errors">
            <summary>List of errors.</summary>
        </member>
        <member name="P:Tatuaz.Gateway.HttpResponses.ErrorResponse.Success">
            <summary>Indicates if request was successful. Should be always false for this type of response.</summary>
        </member>
        <member name="T:Tatuaz.Gateway.HttpResponses.OkResponse`1">
            <summary>
                Wrapper used for returning success responses.
            </summary>
            <param name="Value">Payload of response.</param>
            <param name="Success">Indicates if request was successful. Should be always true for this type of response.</param>
            <typeparam name="T">Type of returned payload.</typeparam>
        </member>
        <member name="M:Tatuaz.Gateway.HttpResponses.OkResponse`1.#ctor(`0,System.Boolean)">
            <summary>
                Wrapper used for returning success responses.
            </summary>
            <param name="Value">Payload of response.</param>
            <param name="Success">Indicates if request was successful. Should be always true for this type of response.</param>
            <typeparam name="T">Type of returned payload.</typeparam>
        </member>
        <member name="P:Tatuaz.Gateway.HttpResponses.OkResponse`1.Value">
            <summary>Payload of response.</summary>
        </member>
        <member name="P:Tatuaz.Gateway.HttpResponses.OkResponse`1.Success">
            <summary>Indicates if request was successful. Should be always true for this type of response.</summary>
        </member>
        <member name="T:Tatuaz.Gateway.Middleware.ExceptionMiddleware">
            <summary>
            Main middleware for handling exceptions. This application does not use
            exception based error handling, so every exception will result in a 500
            and a generic error message.
            </summary>
        </member>
        <member name="M:Tatuaz.Gateway.Middleware.ExceptionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{Tatuaz.Gateway.Middleware.ExceptionMiddleware})">
            <summary>
            Default controller
            </summary>
            <param name="next"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Tatuaz.Gateway.Middleware.ExceptionMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Try to execute rest of the pipeline. If an exception is thrown, handle it.
            Every exception at this point is a internal server error.
            </summary>
            <param name="httpContext"></param>
        </member>
        <member name="T:Tatuaz.Gateway.Swagger.FluentValidationSchemaFilter">
            <summary>
            Schema filter used to correctly display validation checks in swagger
            </summary>
        </member>
        <member name="M:Tatuaz.Gateway.Swagger.FluentValidationSchemaFilter.#ctor(System.IServiceProvider)">
            <summary>
            Default constructor
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:Tatuaz.Gateway.Swagger.FluentValidationSchemaFilter.Apply(Microsoft.OpenApi.Models.OpenApiSchema,Swashbuckle.AspNetCore.SwaggerGen.SchemaFilterContext)">
            <summary>
            Apply the filter to the schema - mark required fields and add validation rules.
            Only not null validator results in required flag.
            </summary>
            <param name="schema"></param>
            <param name="context"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
    </members>
</doc>
