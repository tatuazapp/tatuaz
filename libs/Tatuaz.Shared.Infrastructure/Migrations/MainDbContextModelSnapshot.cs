// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tatuaz.Shared.Infrastructure.DataAccess;

#nullable disable

namespace Tatuaz.Shared.Infrastructure.Migrations
{
    [DbContext(typeof(MainDbContext))]
    partial class MainDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tatuaz.Shared.Domain.Entities.Models.General.EmailInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("EmailType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email_type");

                    b.Property<string>("Error")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("error");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("object_id");

                    b.Property<Instant>("OrderedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ordered_at");

                    b.Property<string>("RecipientEmail")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("recipient_email");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer")
                        .HasColumnName("retry_count");

                    b.Property<Instant?>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.HasKey("Id")
                        .HasName("pk_email_info");

                    b.HasIndex("RecipientEmail")
                        .HasDatabaseName("ix_email_info_recipient_email");

                    b.ToTable("email_info", "general");
                });

            modelBuilder.Entity("Tatuaz.Shared.Domain.Entities.Models.Identity.TatuazRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tatuaz_roles");

                    b.ToTable("tatuaz_roles", "identity");
                });

            modelBuilder.Entity("Tatuaz.Shared.Domain.Entities.Models.Identity.TatuazUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("id");

                    b.Property<string>("Auth0Id")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("auth0id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_tatuaz_users");

                    b.ToTable("tatuaz_users", "identity");
                });

            modelBuilder.Entity("Tatuaz.Shared.Domain.Entities.Models.Identity.TatuazUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("user_email");

                    b.HasKey("Id")
                        .HasName("pk_tatuaz_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_tatuaz_user_roles_role_id");

                    b.HasIndex("UserEmail")
                        .HasDatabaseName("ix_tatuaz_user_roles_user_email");

                    b.ToTable("tatuaz_user_roles", "identity");
                });

            modelBuilder.Entity("Tatuaz.Shared.Domain.Entities.Models.Photo.PhotoCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("image_url");

                    b.Property<int>("Popularity")
                        .HasColumnType("integer")
                        .HasColumnName("popularity");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_photo_categories");

                    b.ToTable("photo_categories", "photo");
                });

            modelBuilder.Entity("Tatuaz.Shared.Domain.Entities.Models.Photo.UserPhotoCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("PhotoCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("photo_category_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_photo_categories");

                    b.HasIndex("PhotoCategoryId")
                        .HasDatabaseName("ix_user_photo_categories_photo_category_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_photo_categories_user_id");

                    b.ToTable("user_photo_categories", "photo");
                });

            modelBuilder.Entity("Tatuaz.Shared.Domain.Entities.Models.Identity.TatuazUserRole", b =>
                {
                    b.HasOne("Tatuaz.Shared.Domain.Entities.Models.Identity.TatuazRole", "Role")
                        .WithMany("TatuazUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tatuaz_user_roles_tatuaz_roles_tatuaz_role_id");

                    b.HasOne("Tatuaz.Shared.Domain.Entities.Models.Identity.TatuazUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tatuaz_user_roles_tatuaz_users_tatuaz_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tatuaz.Shared.Domain.Entities.Models.Photo.UserPhotoCategory", b =>
                {
                    b.HasOne("Tatuaz.Shared.Domain.Entities.Models.Photo.PhotoCategory", "PhotoCategory")
                        .WithMany("UserPhotoCategories")
                        .HasForeignKey("PhotoCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_photo_categories_photo_categories_photo_category_id");

                    b.HasOne("Tatuaz.Shared.Domain.Entities.Models.Identity.TatuazUser", "User")
                        .WithMany("UserPhotoCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_photo_categories_tatuaz_users_user_id");

                    b.Navigation("PhotoCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tatuaz.Shared.Domain.Entities.Models.Identity.TatuazRole", b =>
                {
                    b.Navigation("TatuazUserRoles");
                });

            modelBuilder.Entity("Tatuaz.Shared.Domain.Entities.Models.Identity.TatuazUser", b =>
                {
                    b.Navigation("UserPhotoCategories");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Tatuaz.Shared.Domain.Entities.Models.Photo.PhotoCategory", b =>
                {
                    b.Navigation("UserPhotoCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
